#include <bits/stdc++.h>
using namespace std;
const int MAXN = 5e5 + 5;
const int MAXM = 2e5 + 5;
vector<int> pri = {
    1000000007, 1000000009, 1000000021, 1000000033, 1000000087, 1000000093,
    1000000097, 1000000103, 1000000123, 1000000181, 1000000207, 1000000223,
    1000000241, 1000000271, 1000000289, 1000000297, 1000000321, 1000000349,
    1000000363, 1000000403, 1000000409, 1000000411, 1000000427, 1000000433,
    1000000439, 1000000447, 1000000453, 1000000459, 1000000483, 1000000513,
    1000000531, 1000000579, 1000000607, 1000000613, 1000000637, 1000000663,
    1000000711, 1000000753, 1000000787, 1000000801, 1000000829, 1000000861,
    1000000871, 1000000891, 1000000901, 1000000919, 1000000931, 1000000933,
    1000000993, 1000001011, 1000001021, 1000001053, 1000001087, 1000001099,
    1000001137, 1000001161, 1000001203, 1000001213, 1000001237, 1000001263,
    1000001269, 1000001273, 1000001279, 1000001311, 1000001329, 1000001333,
    1000001351, 1000001371, 1000001393, 1000001413, 1000001447, 1000001449,
    1000001491, 1000001501, 1000001531, 1000001537, 1000001539, 1000001581,
    1000001617, 1000001621, 1000001633, 1000001647, 1000001663, 1000001677,
    1000001699, 1000001759, 1000001773, 1000001789, 1000001791, 1000001801,
    1000001803, 1000001819, 1000001857, 1000001887, 1000001917, 1000001927,
    1000001957, 1000001963, 1000001969, 1000002043, 1000002089, 1000002103,
    1000002139, 1000002149, 1000002161, 1000002173, 1000002187, 1000002193,
    1000002233, 1000002239, 1000002277, 1000002307, 1000002359, 1000002361,
    1000002431, 1000002449, 1000002457, 1000002499, 1000002571, 1000002581,
    1000002607, 1000002631, 1000002637, 1000002649, 1000002667, 1000002727,
    1000002791, 1000002803, 1000002821, 1000002823, 1000002827, 1000002907,
    1000002937, 1000002989, 1000003009, 1000003013, 1000003051, 1000003057,
    1000003097, 1000003111, 1000003133, 1000003153, 1000003157, 1000003163,
    1000003211, 1000003241, 1000003247, 1000003253, 1000003267, 1000003271,
    1000003273, 1000003283, 1000003309, 1000003337, 1000003351, 1000003357,
    1000003373, 1000003379, 1000003397, 1000003469, 1000003471, 1000003513,
    1000003519, 1000003559, 1000003577, 1000003579, 1000003601, 1000003621,
    1000003643, 1000003651, 1000003663, 1000003679, 1000003709, 1000003747,
    1000003751, 1000003769, 1000003777, 1000003787, 1000003793, 1000003843,
    1000003853, 1000003871, 1000003889, 1000003891, 1000003909, 1000003919,
    1000003931, 1000003951, 1000003957, 1000003967, 1000003987, 1000003999,
    1000004023, 1000004059, 1000004099, 1000004119, 1000004123, 1000004207,
    1000004233, 1000004249, 1000004251, 1000004263, 1000004321, 1000004329,
    1000004381, 1000004389, 1000004437, 1000004449, 1000004459, 1000004497,
    1000004507, 1000004519, 1000004539, 1000004567, 1000004569, 1000004581,
    1000004609, 1000004611, 1000004627, 1000004633, 1000004647, 1000004693,
    1000004699, 1000004717, 1000004771, 1000004777, 1000004783, 1000004791,
    1000004807, 1000004839, 1000004843, 1000004849, 1000004857, 1000004867,
    1000004869, 1000004891, 1000004893, 1000004897, 1000004927, 1000004933,
    1000004977, 1000004981, 1000005001, 1000005029, 1000005053, 1000005067,
    1000005103, 1000005133, 1000005187, 1000005197, 1000005203, 1000005233,
    1000005277, 1000005287, 1000005299, 1000005317, 1000005329, 1000005341,
    1000005353, 1000005361, 1000005403, 1000005407, 1000005437, 1000005443,
    1000005449, 1000005451, 1000005469, 1000005491, 1000005527, 1000005541,
    1000005547, 1000005583, 1000005631, 1000005647, 1000005683, 1000005731,
    1000005737, 1000005751, 1000005763, 1000005791, 1000005823, 1000005827,
    1000005833, 1000005847, 1000005863, 1000005899, 1000005907, 1000005947,
    1000005953, 1000005959, 1000005971, 1000005973, 1000005991, 1000005997,
    1000006019, 1000006027, 1000006037, 1000006039, 1000006061, 1000006093,
    1000006099, 1000006127, 1000006129, 1000006177, 1000006193, 1000006211,
    1000006223, 1000006229, 1000006307, 1000006313, 1000006331, 1000006349,
    1000006379, 1000006393, 1000006417, 1000006421, 1000006457, 1000006459,
    1000006477, 1000006541, 1000006571, 1000006577, 1000006583, 1000006607,
    1000006621, 1000006661, 1000006663, 1000006697, 1000006717, 1000006751,
    1000006781, 1000006837, 1000006867, 1000006901, 1000006957, 1000006961,
    1000006967, 1000006981, 1000007003, 1000007023, 1000007027, 1000007089,
    1000007117, 1000007137, 1000007147, 1000007159, 1000007191, 1000007209,
    1000007237, 1000007243, 1000007257, 1000007279, 1000007321, 1000007347,
    1000007383, 1000007389, 1000007417, 1000007429, 1000007447, 1000007453,
    1000007467, 1000007479, 1000007497, 1000007513, 1000007521, 1000007531,
    1000007537, 1000007557, 1000007633, 1000007647, 1000007651, 1000007653,
    1000007681, 1000007707, 1000007719, 1000007741, 1000007759, 1000007773,
    1000007803, 1000007819, 1000007837, 1000007873, 1000007887, 1000007909,
    1000007923, 1000007927, 1000007929, 1000007941, 1000008041, 1000008083,
    1000008089, 1000008101, 1000008109, 1000008127, 1000008173, 1000008181,
    1000008223, 1000008257, 1000008259, 1000008271, 1000008277, 1000008311,
    1000008313, 1000008343, 1000008349, 1000008397, 1000008403, 1000008419,
    1000008431, 1000008439, 1000008487, 1000008511, 1000008557, 1000008593,
    1000008617, 1000008637, 1000008649, 1000008661, 1000008671, 1000008679,
    1000008719, 1000008727, 1000008761, 1000008773, 1000008791, 1000008797,
    1000008803, 1000008811, 1000008829, 1000008853, 1000008899, 1000008917,
    1000008937, 1000008967, 1000009009, 1000009013, 1000009063, 1000009081,
    1000009093, 1000009099, 1000009123, 1000009133, 1000009163, 1000009183,
    1000009211, 1000009223, 1000009259, 1000009277, 1000009279, 1000009289,
    1000009301, 1000009321, 1000009331, 1000009363, 1000009399, 1000009403,
    1000009421, 1000009441, 1000009457, 1000009469, 1000009487, 1000009519,
    1000009529, 1000009531, 1000009541, 1000009559, 1000009561, 1000009567,
    1000009573, 1000009579, 1000009597, 1000009601, 1000009609, 1000009631,
    1000009651, 1000009667, 1000009679, 1000009711, 1000009733, 1000009739,
    1000009757, 1000009789, 1000009831, 1000009859, 1000009867, 1000009961,
    1000009999};
struct rndPrime {
  mt19937 rnd;
  struct timeval tv;
  inline void init() {
    gettimeofday(&tv, NULL);
    rnd.seed(tv.tv_sec ^ tv.tv_usec);
  }
  inline int rand() { return (1ll * rnd() * rnd() + rnd()) % pri.size(); }
  inline int get_pri() { return pri[rand()]; }
} rd;
struct Hash {
  int mod;
  long long pw10[MAXN], h[MAXN];
  void build(char s[], int n) {
    pw10[0] = 1;
    for (int i = 1; i < MAXN; ++i) pw10[i] = pw10[i - 1] * 10 % mod;
    h[0] = 0;
    for (int i = 1; i <= n; ++i) h[i] = (h[i - 1] * 10 + s[i] - '0') % mod;
  }
  inline int get(int l, int r) {
    int res = (h[r] - h[l - 1] * pw10[r - l + 1]) % mod;
    return res < 0 ? res + mod : res;
  }
  inline int get(char s[], int n) {
    long long res = 0;
    for (int i = 1; i <= n; ++i) res = (res * 10 + s[i] - '0') % mod;
    return res;
  }
  inline int get(int l1, int r1, int l2, int r2) {
    int res = get(l1, r1) + get(l2, r2);
    return res >= mod ? res - mod : res;
  }
};
namespace Hash5 {
Hash h1, h2, h3, h4, h5;
inline void build(char s[], int n) {
  h1.mod = rd.get_pri();
  h2.mod = rd.get_pri();
  h3.mod = rd.get_pri();
  h4.mod = rd.get_pri();
  h5.mod = rd.get_pri();
  h1.build(s, n), h2.build(s, n), h3.build(s, n), h4.build(s, n),
      h5.build(s, n);
}
inline array<int, 5> get(char s[], int n) {
  return {h1.get(s, n), h2.get(s, n), h3.get(s, n), h4.get(s, n), h5.get(s, n)};
  ;
}
inline array<int, 5> get(int l, int r) {
  return {h1.get(l, r), h2.get(l, r), h3.get(l, r), h4.get(l, r), h5.get(l, r)};
  ;
}
inline array<int, 5> get(int l1, int r1, int l2, int r2) {
  return {h1.get(l1, r1, l2, r2), h2.get(l1, r1, l2, r2),
          h3.get(l1, r1, l2, r2), h4.get(l1, r1, l2, r2),
          h5.get(l1, r1, l2, r2)};
  ;
}
}  // namespace Hash5
using namespace Hash5;
vector<int> get_z(const string &s) {
  int n = (int)s.size();
  vector<int> z(n);
  z[0] = n;
  for (int i = 1, l = 0, r = 0; i < n; ++i) {
    z[i] = i < r ? min(z[i - l], r - i) : 0;
    while (i + z[i] < n && s[i + z[i]] == s[z[i]]) ++z[i];
    if (i + z[i] > r) l = i, r = i + z[i];
  }
  return z;
}
int n, m;
char s[MAXN], t[MAXM];
int len9[MAXN], lcp[MAXN];
int len0[MAXM];
array<int, 5> dat_t;
inline void chk(int l1, int r1, int l2, int r2) {
  if (get(l1, r1, l2, r2) == dat_t) {
    if (l1 > l2) swap(l1, l2), swap(r1, r2);
    printf("%d %d\n%d %d", l1, r1, l2, r2), exit(0);
  }
}
vector<int> get_len(int l, int r) {
  int pos, dif, post;
  if (r - l + 1 < m)
    pos = l - 1, dif = t[1] - '0', post = 1;
  else {
    if (lcp[l] >= m) return vector<int>{};
    pos = l + lcp[l];
    post = 1 + lcp[l];
    dif = (int)t[post] - (int)s[pos];
  }
  if (dif < 0) return vector<int>{};
  vector<int> res(1, r - pos + 1);
  if (pos == r || dif != 1) return res;
  int len = min(len9[pos + 1], r - pos);
  if (pos + len + 1 <= r) res.push_back(r - (pos + len));
  res.push_back(r - (pos + len) + 1);
  res.push_back(m - min(post + len0[post + 1] + 1, m) + 1);
  return res;
}
inline void chk_len(int l, int r, int k) {
  if (k < 1) return;
  if (r + k <= n) chk(l, r, r + 1, r + k);
  if (l - k >= 1) chk(l, r, l - k, l - 1);
}
int main(void) {
  scanf("%s%s", s + 1, t + 1);
  n = strlen(s + 1);
  m = strlen(t + 1);
  reverse(t + 1, t + m + 1);
  while (t[m] == '0') t[m--] = 0;
  reverse(t + 1, t + m + 1);
  rd.init();
  build(s, n);
  dat_t = get(t, m);
  vector<int> z = get_z(string(t + 1, t + m + 1) + string(s + 1, s + n + 1));
  for (int i = 1; i <= n; ++i) lcp[i] = min(z[i + m - 1], m);
  for (int i = n; i >= 1; --i) len9[i] = s[i] == '9' ? len9[i + 1] + 1 : 0;
  for (int i = m; i >= 1; --i) len0[i] = t[i] == '0' ? len0[i + 1] + 1 : 0;
  for (int i = m - 1; i <= m; ++i)
    if (i >= 1)
      for (int l = 1; l + i - 1 <= n; ++l) {
        int r = l + i - 1;
        vector<int> vec = get_len(l, r);
        for (int x : vec) chk_len(l, r, x);
      }
  return 0;
}
