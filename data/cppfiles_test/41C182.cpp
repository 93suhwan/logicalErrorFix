#include <bits/stdc++.h>
using namespace std;
const long long mod = 1e9 + 7;
const long long N = 2e5 + 7;
const int INF = 0x7fffffff;
int read() {
  int X = 0, w = 0;
  char ch = 0;
  while (!isdigit(ch)) {
    w |= ch == '-';
    ch = getchar();
  }
  while (isdigit(ch)) X = (X << 3) + (X << 1) + (ch ^ 48), ch = getchar();
  return w ? -X : X;
}
char a[N];
int o[10][N];
int main() {
  int n, m, i, j, u;
  n = read();
  m = read();
  cin >> a + 1;
  u = n - n % 3;
  for (i = 1; i < u; i = i + 3) {
    if (a[i] == 'a') {
      o[1][i] = o[1][i - 1];
      o[2][i] = o[2][i - 1];
      o[3][i] = o[3][i - 1] + 1;
      o[4][i] = o[4][i - 1] + 1;
      o[5][i] = o[5][i - 1] + 1;
      o[6][i] = o[6][i - 1] + 1;
    } else if (a[i] == 'b') {
      o[3][i] = o[3][i - 1];
      o[4][i] = o[4][i - 1];
      o[1][i] = o[1][i - 1] + 1;
      o[2][i] = o[2][i - 1] + 1;
      o[5][i] = o[5][i - 1] + 1;
      o[6][i] = o[6][i - 1] + 1;
    } else {
      o[5][i] = o[5][i - 1];
      o[6][i] = o[6][i - 1];
      o[1][i] = o[1][i - 1] + 1;
      o[2][i] = o[2][i - 1] + 1;
      o[3][i] = o[3][i - 1] + 1;
      o[4][i] = o[4][i - 1] + 1;
    }
    if (a[i + 1] == 'a') {
      o[3][i + 1] = o[3][i];
      o[5][i + 1] = o[5][i];
      o[1][i + 1] = o[1][i] + 1;
      o[2][i + 1] = o[2][i] + 1;
      o[4][i + 1] = o[4][i] + 1;
      o[6][i + 1] = o[6][i] + 1;
    } else if (a[i + 1] == 'b') {
      o[1][i + 1] = o[1][i];
      o[6][i + 1] = o[6][i];
      o[2][i + 1] = o[2][i] + 1;
      o[3][i + 1] = o[3][i] + 1;
      o[4][i + 1] = o[4][i] + 1;
      o[5][i + 1] = o[5][i] + 1;
    } else {
      o[2][i + 1] = o[2][i];
      o[4][i + 1] = o[4][i];
      o[1][i + 1] = o[1][i] + 1;
      o[3][i + 1] = o[3][i] + 1;
      o[5][i + 1] = o[5][i] + 1;
      o[6][i + 1] = o[6][i] + 1;
    }
    if (a[i + 2] == 'a') {
      o[4][i + 2] = o[4][i + 1];
      o[6][i + 2] = o[6][i + 1];
      o[1][i + 2] = o[1][i + 1] + 1;
      o[2][i + 2] = o[2][i + 1] + 1;
      o[3][i + 2] = o[3][i + 1] + 1;
      o[5][i + 2] = o[5][i + 1] + 1;
    } else if (a[i + 2] == 'b') {
      o[2][i + 2] = o[2][i + 1];
      o[5][i + 2] = o[5][i + 1];
      o[1][i + 2] = o[1][i + 1] + 1;
      o[3][i + 2] = o[3][i + 1] + 1;
      o[4][i + 2] = o[4][i + 1] + 1;
      o[6][i + 2] = o[6][i + 1] + 1;
    } else {
      o[1][i + 2] = o[1][i + 1];
      o[3][i + 2] = o[3][i + 1];
      o[2][i + 2] = o[2][i + 1] + 1;
      o[4][i + 2] = o[4][i + 1] + 1;
      o[5][i + 2] = o[5][i + 1] + 1;
      o[6][i + 2] = o[6][i + 1] + 1;
    }
  }
  if (n % 3 == 1) {
    if (a[n] == 'a') {
      o[1][n] = o[1][n - 1];
      o[2][n] = o[2][n - 1];
      o[3][n] = o[3][n - 1] + 1;
      o[4][n] = o[4][n - 1] + 1;
      o[5][n] = o[5][n - 1] + 1;
      o[6][n] = o[6][n - 1] + 1;
    } else if (a[n] == 'b') {
      o[3][n] = o[3][n - 1];
      o[4][n] = o[4][n - 1];
      o[1][n] = o[1][n - 1] + 1;
      o[2][n] = o[2][n - 1] + 1;
      o[5][n] = o[5][n - 1] + 1;
      o[6][n] = o[6][n - 1] + 1;
    } else {
      o[5][n] = o[5][n - 1];
      o[6][n] = o[6][n - 1];
      o[1][n] = o[1][n - 1] + 1;
      o[2][n] = o[2][n - 1] + 1;
      o[3][n] = o[3][n - 1] + 1;
      o[4][n] = o[4][n - 1] + 1;
    }
  } else if (n % 3 == 2) {
    if (a[n - 1] == 'a') {
      o[1][n - 1] = o[1][n - 2];
      o[2][n - 1] = o[2][n - 2];
      o[3][n - 1] = o[3][n - 2] + 1;
      o[4][n - 1] = o[4][n - 2] + 1;
      o[5][n - 1] = o[5][n - 2] + 1;
      o[6][n - 1] = o[6][n - 2] + 1;
    } else if (a[n - 1] == 'b') {
      o[3][n - 1] = o[3][n - 2];
      o[4][n - 1] = o[4][n - 2];
      o[1][n - 1] = o[1][n - 2] + 1;
      o[2][n - 1] = o[2][n - 2] + 1;
      o[5][n - 1] = o[5][n - 2] + 1;
      o[6][n - 1] = o[6][n - 2] + 1;
    } else {
      o[5][n - 1] = o[5][n - 2];
      o[6][n - 1] = o[6][n - 2];
      o[1][n - 1] = o[1][n - 2] + 1;
      o[2][n - 1] = o[2][n - 2] + 1;
      o[3][n - 1] = o[3][n - 2] + 1;
      o[4][n - 1] = o[4][n - 2] + 1;
    }
    if (a[n] == 'a') {
      o[3][n] = o[3][n - 1];
      o[5][n] = o[5][n - 1];
      o[1][n] = o[1][n - 1] + 1;
      o[2][n] = o[2][n - 1] + 1;
      o[4][n] = o[4][n - 1] + 1;
      o[6][n] = o[6][n - 1] + 1;
    } else if (a[n] == 'b') {
      o[1][n] = o[1][n - 1];
      o[6][n] = o[6][n - 1];
      o[2][n] = o[2][n - 1] + 1;
      o[3][n] = o[3][n - 1] + 1;
      o[4][n] = o[4][n - 1] + 1;
      o[5][n] = o[5][n - 1] + 1;
    } else {
      o[2][n] = o[2][n - 1];
      o[4][n] = o[4][n - 1];
      o[1][n] = o[1][n - 1] + 1;
      o[3][n] = o[3][n - 1] + 1;
      o[5][n] = o[5][n - 1] + 1;
      o[6][n] = o[6][n - 1] + 1;
    }
  }
  while (m--) {
    int x, y;
    x = read();
    y = read();
    int minn = INF;
    for (i = 1; i <= 6; i++) {
      if (o[i][y] - o[i][x - 1] < minn) minn = o[i][y] - o[i][x - 1];
    }
    printf("%d\n", minn);
  }
  return 0;
}
