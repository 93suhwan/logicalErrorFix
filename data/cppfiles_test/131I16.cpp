// Generated by powerful Codeforces Tool
// You can download the binary file in here https://github.com/dianhsu/cf-tool/releases/ (Windows, macOS(x86, arm64), Linux)
// Author: xudian
// Time: 2021-12-17 07:59:33
//

#include <bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef pair<int, int> PII;
typedef pair<ll, ll> PLL;
#define itr(...) begin(__VA_ARGS__), end(__VA_ARGS__)
#define fastIO() ios::sync_with_stdio(false),cin.tie(nullptr),cout.tie(nullptr)
#define debug(x...) do { cout << "\033[32;1m" << #x <<" -> "; rd_debug(x); } while (0)
void rd_debug() { cout << "\033[39;0m" << endl; }
template<class T, class... Ts> void rd_debug(const T& arg,const Ts&... args) { cout << arg << " "; rd_debug(args...); }
#define pb push_back
#define PF(x) ((x) * (x))
#define LF(x) ((x) * PF(x))
#define fu(i, mm, MM) for(int (i) = (mm); (i) <= (MM); ++(i))
#define fd(i, MM, mm) for(int (i) = (MM); (i) >= (mm); --(i))
#define eps 1e-6

template<typename T = int>
inline T fRead() {
    T x = 0, w = 1; char c = getchar();
    while (c < '0' || c>'9') { if (c == '-') w = -1; c = getchar(); }
    while (c <= '9' && c >= '0') { x = (x << 1) + (x << 3) + c - '0'; c = getchar(); }
    return w == 1 ? x : -x;
}
template<typename T = int>
inline T cRead() {
    T ret;
    cin >> ret;
    return ret;
}

template<class T>
class Y {
    T f;
public:
    template<class U>
    explicit Y(U&& f) : f(forward<U>(f)) {}
    template<class... Args>
    decltype(auto) operator()(Args&&... args) {
        return f(ref(*this), forward<Args>(args)...);
    }
};
template<class T> Y(T)->Y<T>;

const int MOD = 1e9 + 7;
const int inf = 0x3f3f3f3f;
const ll infl = 0x3f3f3f3f3f3f3f3fll;

struct TrieTree{
    // {val, idx}
    PII v;
    vector<int> nex;
    TrieTree(): v(PII{0, 0}), nex(31, 0) {}
};

int main(int argc, char* argv[]) {
    fastIO();
    int n;
    cin >> n;
    vector<int> arr(n);
    vector<TrieTree> trie(1);
    PII val{0, 0};
    int dis = 0;
    auto&& add = [&](vector<int>& vec, int idx){
        int pos = 0;
        vector<int> vis{0};
//        debug(pos);
        for(int i = (int)vec.size() - 1; i >= 0; --i){
            if(trie[pos].nex[vec[i]] == 0) {
                trie[pos].nex[vec[i]] = trie.size();
                trie.emplace_back();
            }
            pos = trie[pos].nex[vec[i]];
//            debug(pos);
            vis.push_back(pos);
        }
        int tp = 0;
        int tv = 0;
//        debug(vis.size());
        for(int i = (int)vis.size() - 1; i >= 0; --i){
            if(trie[vis[i]].v.first + (int)vis.size() - i - 1 > tv and trie[vis[i]].v.second != tp){
//                debug(vis[i], trie[vis[i]].v.first, trie[vis[i]].v.second);
                tp = trie[vis[i]].v.second;
                tv = max(tv, trie[vis[i]].v.first + (int)vis.size() - 1 - i);
            }
            trie[vis[i]].v = max(trie[vis[i]].v, {(int)vis.size() - 1 - i, idx});
        }
//        debug(idx, tv, tp);
        if(dis < tv){
            dis = tv;
            val = {tp, idx};
        }
    };
    auto&& dfs = Y(
        [&](auto&& dfs, int cur, int idx, vector<int>& vec) -> void{
//            debug(idx, cur);
            if(cur == 0){
                add(vec, idx);
                return;
            }
            int v = (31 - __builtin_clz(cur));
            if((1 << v) == cur){
                vec.push_back(v);
                dfs(0, idx, vec);
            }else{
                vec.push_back(v + 1);
                dfs((1 << (v + 1)) - cur, idx, vec);
            }
        }
    );
    for(int i = 0; i < n; ++i){
        cin >> arr[i];
        vector<int> tmp;
        dfs(arr[i], i + 1, tmp);
    }
    cout << val.first << " " << val.second << " " << dis << endl;
    return 0;
}
